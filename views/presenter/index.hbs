<canvas class="w-100 h-100">

</canvas>

<div class="instruction">
    <h1>Push PDF in order to activate display</h1>

    <div class="qr-code"></div>
</div>

<div class="qr-code auto-hide d-none">
</div>

<script src="/scripts/socketio/socket.io.js"></script>
<script src="/scripts/qrcodejs/qrcode.js"></script>
<script src="/scripts/pdfjs/pdf.js"></script>

<script type="application/javascript">
    enableFullscreenToggle();

    const namespace = "{{namespace}}";

    const $instructionQrCode = document.querySelector('.instruction .qr-code');
    const $qrCodeAutoHide = document.querySelector('.qr-code.auto-hide');

    const $instruction = document.querySelector('.instruction');
    const $canvas = document.querySelector('canvas');
    const canvasContext = $canvas.getContext('2d');

    let pageAdvanceTimeoutId;
    let latestRenderTask;
    let loadingTask;

    let currentPresentation = "{{startWith}}";

    let moveTimeout;
    function timeoutQrOnMouseMove() {
        if (moveTimeout) {
            clearTimeout(moveTimeout);
            moveTimeout = null;
        }

        if ($qrCodeAutoHide.classList.contains('d-none')) {
            $qrCodeAutoHide.classList.remove('d-none');
        }

        moveTimeout = setTimeout(() => {
            if (!$qrCodeAutoHide.classList.contains('d-none')) {
                $qrCodeAutoHide.classList.add('d-none');
            }
        }, 10000);
    }

    function beginPresenting(file) {
        window.removeEventListener('mousemove', timeoutQrOnMouseMove);
        window.addEventListener('mousemove', timeoutQrOnMouseMove);

        if (pageAdvanceTimeoutId) {
            clearTimeout(pageAdvanceTimeoutId);
            pageAdvanceTimeoutId = null;
        }

        if (latestRenderTask) {
            latestRenderTask.cancel();
            latestRenderTask = null;
        }

        if (loadingTask) {
            loadingTask.destroy();
            loadingTask = null;
        }

        if (!$instruction.classList.contains('d-none')) {
            $instruction.classList.add('d-none');
        }

        $canvas.width = $canvas.clientWidth;
        $canvas.height = $canvas.clientHeight;

        loadingTask = pdfjsLib.getDocument(file);

        loadingTask.then(pdf => {
            const numberOfPages = pdf.numPages;
            let currentPage = 1;

            function renderPage(pageNumber) {
                pdf.getPage(pageNumber).then(page => {
                    const viewport = page.getViewport(1.0);
                    const scale = $canvas.clientWidth / viewport.width;
                    const scaledViewport = page.getViewport(scale);

                    latestRenderTask = page.render({ canvasContext,  viewport: scaledViewport });
                });

                pageAdvanceTimeoutId = setTimeout(() => {
                    currentPage = (++currentPage % numberOfPages) + 1;
                    renderPage(currentPage);
                }, 10000);
            }

            renderPage(currentPage);
        });
    }

    if (currentPresentation) {
        beginPresenting(currentPresentation);
    }

    window.addEventListener('optimizedResize', () => {
        if (currentPresentation) {
            beginPresenting(currentPresentation);
        }
    });

    const socket = io(`/presenter?room=${namespace}`);

    socket.on('reload_presentation', (file) => {
        beginPresenting(file);
    });

    new QRCode($instructionQrCode, slashJoin(window.location.href, "upload"));
    new QRCode($qrCodeAutoHide, slashJoin(window.location.href, "upload"));
</script>

